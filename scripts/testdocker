#!/bin/sh
#
localip=192.168.2.127
#
testdir=/tmp/qmail-test
user=$(whoami)
maildir=$testdir/$user/Maildir
homedir=$testdir/home/mail
servicedir=$testdir/service
sysconfdir=$testdir/etc/indimail
cntrldir=$sysconfdir/control
certdir=$sysconfdir/certs
logdir=$testdir/logs
bindir=/usr/bin
sbindir=/usr/sbin
qmail_newu=$sbindir/qmail-newu
qmail_start=$sbindir/qmail-start
qmail_smtpd=$sbindir/qmail-smtpd
tcpserver=$bindir/tcpserver
smtp_port=2050
sleep_int=2
HOSTNAME=$(uname -n)

domain1=argos.indimail.org
domain2=podman.indimail.org
domain3=virtual.indimail.org
password="abcdefgh12"

function check_service()
{
	count=1
	while true
	do
		[ $verbose -eq 1 ] && echo "Checking Service $2 count=$count" 1>&2
		str=$(podman exec $1 svstat /service/$2 2>&1)
		if [ -z "$str" ] ; then
			echo "Service $2 is not up. unable to get service status" 1>&2
			return 2
		fi
		echo $str | grep -E -i "warning:|Error:" > /dev/null
		if [ $? -ne 0 ] ; then
			t=$(echo $str | awk '{print $2}')
			s=$(echo $str | awk '{print $3}')
		else
			[ $verbose -eq 1 ] && echo "svscan maybe down or just starting: [$str]"
			sleep 5;
			count=$(expr $count + 1)
			if [ $count -gt 12 ] ; then
				break
			fi
			continue
		fi
		if [ "$t" = "up" ] ; then
			if [ $s -ge 10 ] ; then
				[ $verbose -eq 1 ] && echo "Service $2 is up: [$str]"
				return 0
			else
				sleep $(expr 10 - $s)
				count=$(expr $count + 1)
				if [ $count -gt 12 ] ; then
					break
				fi
				continue
			fi
		elif [ "$t" = "wait" -a $s -gt 0 ] ; then
			[ $verbose -eq 1 ] && echo "Service $2 is waiting for $s secs: [$str]"
			sleep $s
			count=$(expr $count + 1)
			if [ $count -gt 12 ] ; then
				break
			fi
			continue
		elif [ "$t" = "down" -o $s -eq 0 ] ; then
			[ $verbose -eq 1 ] && echo "Service $2 is down: [$str]"
			count=$(expr $count + 1)
		else
			echo "Service $2 is not up: [$str]" 1>&2
			return 2
		fi
		sleep 5;
		if [ $count -gt 12 ] ; then
			break
		fi
	done
	echo "Service $2 is not up: [$str]" 1>&2
	return 1
}

function check_mail()
{
	count=0
	ret=1
	(
	while true
	do
		mcount=$(sudo ls $1/new | wc -l)
		if [ $mcount -gt 0 ] ; then
			mail_file=$(sudo ls -lt $1/new|head -2|tail -1|awk '{print $9}')
			sudo /bin/rm -f $1/new/$mail_file
			return 0
		fi
		sleep 1
		count=$(expr "$count" + 1)
		echo count=$count
		if [ $count -gt 40 ] ; then
			echo "Failed to receive Mail" 1>&2
			break
		fi
	done
	return 1
	) >> $logdir/mail/mail.log 2>&1
}

function setup_maildir()
{
	if [ -d $maildir/new ] ; then
		find $maildir/new -type f -exec /bin/rm -f {} \;
	fi
	mkdir -p $cntrldir
	mkdir -p $sysconfdir/users
	echo "Creating $maildir" 1>&2
	for i in cur new tmp
	do
		mkdir -p $maildir/$i
	done
}

function shutdown_svscan()
{
	[ $verbose -eq 1 ] && echo "Shutting down svscan"
	if [ -d $servicedir/.svscan/log ] ; then
		sudo kill $1
		sleep 5
		sudo svc -dx $servicedir/* $servicedir/*/log $servicedir/.svscan/log
	else
		sudo kill $1
		sleep 5
		sudo svc -dx $servicedir/* $servicedir/*/log
	fi
}

function setup_assign()
{
	echo "Creating $sysconfdir/users/assign" 1>&2
	(
	echo "=$user:$user:1000:1000:$testdir/$user:::"
	echo "+$user-:$user:1000:1000:$testdir/$user:-::"
	echo "."
	) > $sysconfdir/users/assign
	echo "Creating $sysconfdir/users/cdb" 1>&2
	$qmail_newu $sysconfdir/users
}

function setup_queue()
{
	echo "Creating queue in $testdir/queue" 1>&2
	sudo queue-fix $testdir/queue
}

function setup_config()
{
	[ $verbose -eq 1 ] && echo "Creating default config files in $cntrldir" 1>&3
	env CONTROLDIR=$cntrldir config-fast $domain1 

	echo ./Maildir/                > $cntrldir/defaultdelivery
	echo TLSv1_3                   > $cntrldir/tlsclientmethod
	echo TLSv1_3                   > $cntrldir/tlsservermethod
	echo blocked@$HOSTNAME         > $cntrldir/badmailfrom
	echo blocked@$HOSTNAME         > $cntrldir/badrcptto
	echo "$domain2:127.0.0.1:2025" > $cntrldir/smtproute

	[ $verbose -eq 1 ] && echo "Creating qmail config" 1>&3
	sudo /usr/sbin/svctool --cntrldir=$cntrldir --config=qmail
	[ $verbose -eq 1 ] && echo "Creating openssl certificates" 1>&3
	sudo /usr/sbin/svctool --certdir=$certdir    --config=cert \
		--postmaster=postmaster@$HOSTNAME --common_name=$HOSTNAME
	sudo chown -R $user $cntrldir
	echo @$HOSTNAME > $cntrldir/nodnscheck
}

function setup_svscan_without_svscanlog()
{
	[ $verbose -eq 1 ] && echo "Starting svscan services without svscanlog"
	sudo /bin/rm -rf $servicedir
	sudo /bin/rm -rf $logdir/smtpd
	sudo /bin/rm -rf $logdir/qmail-send

	mkdir -p $servicedir/smtpd/variables
	mkdir -p $servicedir/smtpd/log
	echo 1              > $servicedir/smtpd/variables/USE_QPWGR
	echo 0              > $servicedir/smtpd/variables/BIGTODO
	echo 23             > $servicedir/smtpd/variables/CONFSPLIT
	echo $cntrldir      > $servicedir/smtpd/variables/CONTROLDIR
	echo $testdir/queue > $servicedir/smtpd/variables/QUEUEDIR
	echo $certdir       > $servicedir/smtpd/variables/CERTDIR
	printf "#!/bin/sh\nexec envdir ./variables $tcpserver -u qmaild -g qmail -v -HR 0 $smtp_port $qmail_smtpd 2>&1\n" > $servicedir/smtpd/run
	printf "#!/bin/sh\nexec /usr/sbin/multilog t $logdir/smtpd\n" > $servicedir/smtpd/log/run
	chmod +x $servicedir/smtpd/run
	chmod +x $servicedir/smtpd/log/run

	mkdir -p $servicedir/qmail-send/variables
	mkdir -p $servicedir/qmail-send/log
	echo /bin:/usr/sbin    > $servicedir/qmail-send/variables/PATH
	echo 0                 > $servicedir/qmail-send/variables/BIGTODO
	echo 1                 > $servicedir/qmail-send/variables/QPWGR
	echo 23                > $servicedir/qmail-send/variables/CONFSPLIT
	echo $cntrldir         > $servicedir/qmail-send/variables/CONTROLDIR
	echo $testdir/queue    > $servicedir/qmail-send/variables/QUEUEDIR
	echo $sysconfdir/users > $servicedir/qmail-send/variables/ASSIGNDIR
	echo $certdir          > $servicedir/qmail-send/variables/CERTDIR
	printf "#!/bin/sh\nexec envdir ./variables $qmail_start -s ./Maildir/ 2>&1\n" > $servicedir/qmail-send/run
	printf "#!/bin/sh\nexec /usr/sbin/multilog t $logdir/qmail-send\n" > $servicedir/qmail-send/log/run
	chmod +x $servicedir/qmail-send/run
	chmod +x $servicedir/qmail-send/log/run
}

function start_svscan_without_svscanlog()
{
	(
	sudo env - \
		DISABLE_RUN=1 \
		SILENT=1 \
		PATH=/bin:/usr/sbin \
		/usr/sbin/svscan $servicedir
	) > $logdir/svscan/svscan.log 2>&1 &
	sleep 1
	svpid=$(sed -n '$p' $servicedir/.svscan.pid)
	sudo kill -0 $svpid
	if [ $? -ne 0 ] ; then
		echo "  testing svscan (without svscanlog) startup failed" 1>&2
		shutdown_svscan $svpid
		exit 1
	fi
	for i in smtpd smtpd/log qmail-send qmail-send/log
	do
		sudo svok $servicedir/smtpd
		if [ $? -ne 0 ] ; then
			echo "  testing service $i startup failed" 1>&2
			shutdown_svscan $svpid
			exit 1
		fi
	done
}

function do_setup()
{
	# basic setup for maildir, assign config and queue
	mkdir -p $homedir
	sudo /bin/rm -rf $logdir
	mkdir -p $logdir/setup
	mkdir -p $logdir/mail
	mkdir -p $logdir/qmail-send
	mkdir -p $logdir/svscan
	mkdir -p $logdir/smtpd
	mkdir -p $logdir/podman
	(
	[ $verbose -eq 1 ] && echo "Creating maildir" 1>&3
	setup_maildir
	[ $verbose -eq 1 ] && echo "Creating assign" 1>&3
	setup_assign
	[ $verbose -eq 1 ] && echo "Creating config" 1>&3
	setup_config
	[ $verbose -eq 1 ] && echo "Creating queue" 1>&3
	setup_queue
	) > $logdir/setup/setup.log 2>&1
}

function do_svscan_without_svscanlog()
{
	# start svscan without svscanlog
	[ $verbose -eq 1 ] && echo "Setting  svscan service" 1>&3
	setup_svscan_without_svscanlog
	start_svscan_without_svscanlog
	svpid=$(sed -n '$p' $servicedir/.svscan.pid)
}

function test_iwebadmin()
{
	u=$1
	d=$2
	p=$3

	if [ "$u" = "postmaster" ] ; then
		echo "Executing curl to test iwebadmin admin login"
	else
		echo "Executing curl to test iwebadmin user  login"
	fi
	podman exec -ti $name /usr/bin/curl "http://localhost/cgi-bin/iwebadmin" -d \
		"username="$u"&domain="$d"&password="$p"&returnhttp=&returntext=" \
		> $logdir/podman/roundcube.log 2>&1
	if [ $? -ne 0 ] ; then
		fcount=$(expr $fcount + 1)
		if [ "$u" = "postmaster" ] ; then
			echo "  testing iwebadmin admin login via podman container $what.$image failed"
		else
			echo "  testing iwebadmin user  login via podman container $what.$image failed"
		fi
		if [ -z "$failed" ] ; then
			failed="iwebadmin-$what:$image"
		else
			failed="$failed iwebadmin-$what:$image"
		fi
		echo "Press ENTER or quit to quit"
		read key
		if [ "$key" = "quit" ] ; then
			doquit=1
		fi
	fi

	t1=0
	t2=0
	grep "<h2>Invalid Login" $logdir/podman/roundcube.log >/dev/null
	t1=$?
	if [ "$u" = "postmaster" ] ; then
		grep "background=\"/images/iwebadmin/main.png\"" $logdir/podman/roundcube.log > /dev/null
	else
		grep "<b>Modify User: $u@$d</b>" $logdir/podman/roundcube.log >/dev/null
	fi
	t2=$?

	if [ $t2 -eq 0 -a $t1 -ne 0 ] ; then
		tcount=$(expr $tcount + 1)
		if [ "$u" = "postmaster" ] ; then
			echo "  testing iwebadmin admin login via podman container $what.$image succeeded"
		else
			echo "  testing iwebadmin user  login via podman container $what.$image succeeded"
		fi
	elif [ $t1 -eq 0 -a $t2 -ne 0 ] ; then
		fcount=$(expr $fcount + 1)
		if [ "$u" = "postmaster" ] ; then
			echo "  testing iwebadmin admin login via podman container $what.$image failed"
		else
			echo "  testing iwebadmin user  login via podman container $what.$image failed"
		fi
		if [ -z "$failed" ] ; then
			failed="iwebadmin-$what:$image"
		else
			failed="$failed iwebadmin-$what:$image"
		fi
		cat $logdir/podman/roundcube.log
		echo "Press ENTER or quit to quit"
		read key
		if [ "$key" = "quit" ] ; then
			doquit=1
		fi
	else
		cat $logdir/podman/roundcube.log
	fi
	logout=$(grep logout $logdir/podman/roundcube.log | sed -e "s{.*a href={{" -e "s{>Log Out.*{{" -e "s{\"{{g")
	podman exec -ti $name /usr/bin/curl -X GET $url > /dev/null
	/bin/rm -f $logdir/podman/roundcube.log
}

test_docker()
{
	if [ $doquit -eq 1 ] ; then
		return 0
	fi
	image=$1
	what=$2
	if [ $prompt -eq 1 ] ; then
		echo -n "Test $what:$image (Y/N) - "
		read key
		if [ "$key" = "quit" ] ; then
			doquit=1
			return 0
		fi
		if [ "$key" != "Y" -a "$key" != "y" ] ; then
			return 0
		fi
	fi
	update=0
	if [ $do_update -eq 0 ] ; then
		podman image exists cprogrammer/$what:$image
		if [ $? -ne 0 ] ; then
			update=1
		fi
	else
		update=1
	fi
	if [ $update -eq 1 ] ; then
		echo "podman pull cprogrammer/$what:$image"
		podman pull cprogrammer/$what:$image
	fi
	id=$(podman image list -q cprogrammer/$what:$image)
	echo "Testing $what:$image id=$id"
	if [ $selinux_enabled -eq 1 ] ; then
		vol="$homedir:/home/mail:z"
	else
		vol="$homedir:/home/mail"
	fi
	if [ "$what" = "indimail-web" -o "$what" = "indimail-mta-web" ] ; then
		name="webmail"
	else
		name="$what"
	fi
	if [ $verbose -eq 1 ] ; then
		extra="--cap-add IPC_LOCK   --cap-add SYS_RESOURCE --cap-add=NET_ADMIN  --cap-add=CAP_NET_RAW --cap-add=SYS_NICE"
		echo "podman run $extra -d --rm -h $domain2 --name $name -p 8000:80 -p 2025:25 -p 2587:587 -v $vol $id -d $domain2 $name"
		podman run $extra -d --rm -h $domain2 --name $name -p 8000:80 -p 2025:25 -p 2587:587 -v $vol $id -d $domain2 $name
	else
		extra="-q --cap-add IPC_LOCK   --cap-add SYS_RESOURCE --cap-add=NET_ADMIN  --cap-add=CAP_NET_RAW --cap-add=SYS_NICE"
		podman run $extra -d --rm -h $domain2 --name $name -p 8000:80 -p 2025:25 -p 2587:587 -v $vol $id -d $domain2 $name >/dev/null
	fi
	if [ $? -ne 0 ] ; then
		echo "Failed to run $what:$image"
		return 1
	fi
	if [ "$name" = "indimail" -o "$name" = "webmail" ] ; then
		case $image in
		jammy)
			for i in qmail-send.25 slowq-send inlookup.infifo indisrvr.4000
			do
				podman exec -ti $name /bin/rm -f /service/$i/variables/MYSQL_OPT_RECONNECT
				podman exec -ti $name svc -r /service/$i
			done
		;;
		#stream9)
		#podman exec -ti $name setcap -r /usr/libexec/mysqld
		#;;
		esac
	fi
	case $image in
		bionic)
			podman exec -ti $name sh -c "echo 209715200 > /service/qmail-smtpd.25/variables/SOFT_MEM"
			podman exec -ti $name svc -r /service/qmail-smtpd.25
		;;
	esac
	if [ $verbose -eq 1 ] ; then
		podman ps
	fi

	if [ "$name" = "indimail-mta" ] ; then
		ret=0
		(
		podman exec -ti $name sh -c "printf \"&$user@$domain1\n\"         > /var/indimail/alias/.qmail-$user"
		podman exec -ti $name sh -c "printf \"$domain1:$localip:$smtp_port\n\" > /etc/indimail/control/smtproutes"
		podman exec -ti $name touch /etc/indimail/control/chkrcptdomains
		podman exec -ti $name svc -h /service/qmail-smtpd.25
		sleep $sleep_int
		[ $verbose -eq 1 ] && echo "sending mail to user $user@$domain2 from testuser01@example.com"
		if [ $verbose -eq 1 ] ; then
			swaks    --to $user@$domain2 --from testuser01@example.com -s 127.0.0.1 -p 2025
		else
			swaks -S --to $user@$domain2 --from testuser01@example.com -s 127.0.0.1 -p 2025
		fi
		) > $logdir/podman/$what.$image.log 2>&1
	else
		check_service $name mysql.3306
		ret=$?
		if [ $ret -eq 0 ] ; then
			[ $verbose -eq 1 ] && echo "adding domain $domain3, user $user@$domain3"
			(
			podman exec -ti $name sh -c "printf \"$domain1:$localip:$smtp_port\n\" > /etc/indimail/control/smtproutes"
			podman exec -ti $name touch /etc/indimail/control/chkrcptdomains
			podman exec -ti $name svc -h /service/qmail-smtpd.25
			echo "podman commands vadddomain, vadduser"
			podman exec -ti $name vadddomain $domain3 $password
			podman exec -ti $name vadduser $user@$domain3 $password
			echo "------------------"
			) > $logdir/podman/$what.$image.log 2>&1
			check_service $name inlookup.infifo
			ret=$?
			if [ $ret -eq 0 ] ; then
				(
				sleep $sleep_int
				[ $verbose -eq 1 ] && echo "sending mail to user $user@$domain3 from testuser01@example.com"
				if [ $verbose -eq 1 ] ; then
					swaks    --to $user@$domain3 --from testuser01@example.com -s 127.0.0.1 -p 2025
				else
					swaks -S --to $user@$domain3 --from testuser01@example.com -s 127.0.0.1 -p 2025
				fi
				) > $logdir/podman/$what.$image.log 2>&1
			else
				echo "Did not find a running inlookup service" 1>&2
			fi
		else
			echo "Did not find a running MySQL service" 1>&2
		fi
	fi
	if [ $ret -eq 0 ] ; then
		sleep $sleep_int
		(
		echo "------ qmail-smtpd log ------"
		podman exec -ti $name cat /var/log/svc/smtpd.25/current
		echo "------ qmail-send  log ------"
		podman exec -ti $name cat /var/log/svc/deliver.25/current
		echo "------ --------------- ------"
		) >> $logdir/podman/$what.$image.log 2>&1
		if [ "$name" = "indimail-mta" ] ; then
			[ $verbose -eq 1 ] && echo "Checking mail receipt in $maildir"
			check_mail $maildir
		else
			t=$(podman exec -ti $name vuserinfo -d $user@$domain3|awk '{print $3}')
			[ $verbose -eq 1 ] && echo "Checking mail receipt in "$testdir""$t"/Maildir"
			check_mail "$testdir"$t/Maildir
		fi
		if [ $? -eq 0 ] ; then
			ret=0
			tcount=$(expr $tcount + 1)
			echo "  testing mail send+receive via podman container $what.$image succeeded"
		else
			ret=1
			fcount=$(expr $fcount + 1)
			echo "  testing mail send+receive via podman container $what.$image failed"
			cat $logdir/podman/$what.$image.log
			if [ -z "$failed" ] ; then
				failed="mail-$what:$image"
			else
				failed="$failed mail-$what:$image"
			fi
			echo "Press ENTER or quit to quit"
			read key
			if [ "$key" = "quit" ] ; then
				doquit=1
			fi
		fi
	else
		fcount=$(expr $fcount + 1)
		echo "  testing mail send+receive via podman container $what.$image failed"
		if [ -z "$failed" ] ; then
			failed="mail-$what:$image"
		else
			failed="$failed mail-$what:$image"
		fi
		echo "Press ENTER or quit to quit"
		read key
		if [ "$key" = "quit" ] ; then
			doquit=1
		fi
	fi
	if [ "$name" = "webmail" ] ; then
		[ $verbose -eq 1 ] && echo "Checking Roundcube Login as user $user@$domain3"
		podman cp scripts/test_roundcube $name:/usr/bin
		podman cp scripts/rclogin.php $name:/usr/bin
		case $image in
			leap15.4|leap15.5|tumbleweed)
			sleep $sleep_int
			;;
			*)
			check_service $name php-fpm
			check_service $name httpd
			;;
		esac
		podman exec -ti $name /usr/bin/test_roundcube "http://localhost/indimail/" "$user@$domain3" "$password"
		if [ $? -eq 0 ] ; then
			tcount=$(expr $tcount + 1)
			echo "  testing webmail login via podman container $what.$image succeeded"
		else
			fcount=$(expr $fcount + 1)
			echo "  testing webmail login via podman container $what.$image failed"
			if [ -z "$failed" ] ; then
				failed="roundcube-$what:$image"
			else
				failed="$failed roundcube-$what:$image"
			fi
			echo "Press ENTER or quit to quit"
			read key
			if [ "$key" = "quit" ] ; then
				doquit=1
			fi
		fi
		[ $verbose -eq 1 ] && echo "Checking iwebadmin user  Login $user@$domain3"
		test_iwebadmin $user $domain3 "$password"
		[ $verbose -eq 1 ] && echo "Checking iwebadmin admin Login postmaster@$domain3"
		test_iwebadmin "postmaster" $domain3 "$password"
	fi
	[ $verbose -eq 1 ] && echo -n "Stopping $image container"
	(
	podman stop $name
	if [ $ret -eq 0 -a $delete -eq 1 ] ; then
		[ $verbose -eq 1 ] && echo "Deleting $image container"
		podman rmi $id
	fi
	) >> $logdir/podman/$what.$image.log 2>&1
	if [ $verbose -eq 1 ] ; then
		cat $logdir/podman/$what.$image.log
	fi
}

usage()
{
	(
	echo "testdocker [-y|--nprompt] [-u|--update] [-v|--verbose] [-d|--delete] [-c catalog|--catalog catalog]"
	echo ""
	echo "   where catalog is one of indimail, indimail-mta, indimail-mta-web, indimail-web"
	echo "   if -c is not provided, all four (indimail, indimail-mta, indimail-mta-web, indimail-web) will be processed"
	) 1>&2
	exit 1
}

exec 3>&1
fcount=0
tcount=0
prompt=1
doquit=0
delete=0
do_update=0
verbose=0
catalog=""
localip=$(ipmeprint |grep -E -v "ipv6|0.0.0.0|127.0.0.1"|head -1|awk '{print $3}')
if [ $(basename $PWD) != "scripts" ] ; then
	echo "Not in scripts" 1>&2
	exit 1
fi
sudo ls -d /tmp >/dev/null 2>&1
if [ $? -ne 0 ] ; then
	echo "$0: This script requires sudo privileges" 1>&2
	exit 1
fi
if [ -x /usr/sbin/getenforce ] ; then
	x=$(getenforce)
	if [ "$x" = "disabled" ] ; then
		selinux_enabled=0
	else
		selinux_enabled=1
	fi
else
	selinux_enabled=0
fi

cd ..
if [ ! -x /usr/bin/podman -a ! -x /usr/bin/docker ] ; then
	echo "podman/docker command not found" 1>&2
	exit 1
fi
options=$(getopt -a -n testdocker -o "hyuvdc:" -l help,noprompt,update,verbose,delete,catalog -- "$@")
if [ $? != 0 ]; then
  usage
fi
eval set -- "$options"
while :
do
	case "$1" in
	-y | --noprompt)
	prompt=0
	shift
	;;
	-h | --help)
	usage
	shift
	;;
	-u | --update)
	do_update=1
	shift
	;;
	-v | --verbose)
	verbose=1
	shift
	;;
	-d | --delete)
	delete=1
	shift
	;;
	-c | --catalog)
	if [ -z "$catalog" ] ; then
		catalog="$2"
	else
		catalog="$catalog $2"
	fi
	shift 2
	;;
	--) # end of options
	shift
	break
	;;
	*)
	echo "Unexpected option: $1 - this should'nt happen." 1>&2
	usage
	;;
	esac
done

do_setup
do_svscan_without_svscanlog
[ $verbose -eq 1 ] && echo

if [ $# -eq 0 ] ; then
	if [ -z "$catalog" ] ; then
		process_indimail=1
		process_indimail_mta=1
		process_indimail_web=1
		process_indimail_mta_web=1
	else
		process_indimail=0
		process_indimail_mta=0
		process_indimail_web=0
		process_indimail_mta_web=0
		for i in $catalog
		do
			if [ "$i" = "indimail" ] ; then
				process_indimail=1
			elif [ "$i" = "indimail-mta" ] ; then
				process_indimail_mta=1
			elif [ "$i" = "indimail-web" ] ; then
				process_indimail_web=1
			elif [ "$i" = "indimail-mta-web" ] ; then
				process_indimail_mta_web=1
			fi
		done
	fi
	if [ $doquit -eq 0 -a $process_indimail_mta -eq 1 ] ; then
		for i in indimail-mta/*/Dockerfile
		do
			dir=$(dirname $i )
			if [ -f $dir/.notest ] ; then
				continue
			fi
			image=$(echo $i | cut -d/ -f2)
			test_docker $image indimail-mta
			if [ $doquit -eq 1 ] ; then
				break
			fi
			echo
		done
		for i in indimail-src/*.indimail-mta.bin
		do
			image=$(echo $i | cut -d/ -f2 | cut -d. -f1)
			test_docker $image indimail-mta
			if [ $doquit -eq 1 ] ; then
				break
			fi
			echo
		done
	fi
	if [ $doquit -eq 0 -a $process_indimail -eq 1 ] ; then
		for i in indimail/*/Dockerfile
		do
			dir=$(dirname $i )
			if [ -f $dir/.notest ] ; then
				continue
			fi
			image=$(echo $i | cut -d/ -f2)
			test_docker $image indimail
			if [ $doquit -eq 1 ] ; then
				break
			fi
			echo
		done
		for i in indimail-src/*.indimail.bin
		do
			image=$(echo $i | cut -d/ -f2 | cut -d. -f1)
			test_docker $image indimail
			if [ $doquit -eq 1 ] ; then
				break
			fi
			echo
		done
	fi
	if [ $doquit -eq 0 -a $process_indimail_web -eq 1 ] ; then
		for i in webmail/*/Dockerfile
		do
			dir=$(dirname $i )
			if [ -f $dir/.notest ] ; then
				continue
			fi
			image=$(echo $i | cut -d/ -f2)
			test_docker $image indimail-web
			if [ $doquit -eq 1 ] ; then
				break
			fi
			echo
		done
		for i in indimail-src/*.indimail-web.bin
		do
			image=$(echo $i | cut -d/ -f2 | cut -d. -f1)
			test_docker $image indimail-web
			if [ $doquit -eq 1 ] ; then
				break
			fi
			echo
		done
	fi
	if [ $doquit -eq 0 -a $process_indimail_mta_web -eq 1 ] ; then
		for i in indimail-src/*.indimail-mta-web.bin
		do
			image=$(echo $i | cut -d/ -f2 | cut -d. -f1)
			test_docker $image indimail-mta-web
			if [ $doquit -eq 1 ] ; then
				break
			fi
			echo
		done
	fi
else
	for i in $*
	do
		what=$(echo $i|cut -d: -f1)
		image=$(echo $i|cut -d: -f2)
		test_docker $image $what
		if [ $doquit -eq 1 ] ; then
			break
		fi
		echo
	done
fi
[ $verbose -eq 1 ] && echo "Tests Completed"
shutdown_svscan $svpid
wait
# Cleanup
sudo /bin/rm -rf $servicedir
sudo /bin/rm -rf $logdir
sudo /bin/rm -rf $testdir/queue
sudo /bin/rm -rf $sysconfdir/users
if [ $fcount -ne 0 ] ; then
	echo "$tcount tests succeeded, $fcount tests failed"
	if [ -n "$failed" ] ; then
		echo "failed list=$failed"
	fi
else
	echo "All $tcount tests succeeded"
fi
exit 0
